#!/bin/bash
#
# Copyright (C) 2018, Robert Oostenveld
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

displayhelp() { 
echo 
echo This utility prints out the commands needed to convert and rename the
echo files in a raw data directory to BIDS. The raw directory should contain
echo the DICOM and the CTF data files in a BIDS-like organization, like we
echo have them at the Donders.
echo
echo Prior to using this tool, you can use the reorganize_dicom_files and 
echo the reorganize_ctf_files tools to reorganize existing data into a 
echo BIDS-like structure.
echo
echo Use as
echo $0 '-s <SOURCEDIR> -t <TARGETDIR>'
echo
}

echoerr() {
echo "$@" 1>&2;
}

##############################################################################
# parse command line arguments
##############################################################################

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"
case $key in
    -h|--help)
    displayhelp
    exit 0
    ;;
    -s|--source)
    SOURCE=$(realpath "$2")
    shift # past argument
    shift # past value
    ;;
    -t|--target)
    TARGET=$(realpath "$2")
    shift # past argument
    shift # past value
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

##############################################################################
# test the options
##############################################################################

if [ -z ${SOURCE} ]; then
echoerr ERROR: source directory must be specified
exit 1
fi

if [ -z ${TARGET} ]; then
echoerr ERROR: target directory must be specified
exit 1
fi

if [ ! -d ${SOURCE} ]; then
echoerr ERROR: source directory does not exist
exit 1
fi

if [ -d ${TARGET} ]; then
echoerr WARNING: existing files in target directory will be overwritten
fi

##############################################################################
# parse the data and create a script to convert it
##############################################################################

for SUB in $SOURCE/sub-* ; do 
# remove the base part of the directory
SUB=`basename ${SUB}`
for SES in $SOURCE/${SUB}/ses-* ; do 
# remove the base part of the directory
SES=`basename ${SES}`
for TYP in $SOURCE/${SUB}/${SES}/* ; do 
# remove the base part of the directory
TYP=`basename ${TYP}`

case ${TYP} in 
  *t1*)
    # these should start with _ when non-empty
    ACQ=
    CE=
    REC=
    RUN=
    MODALITY=_T1w

    OLDDIR=${SOURCE}/${SUB}/${SES}/${TYP}
    NEWDIR=${TARGET}/${SUB}/${SES}/anat
    NEWNAME=${SUB}_${SES}${ACQ}${RUN}${MODALITY}

    echo mkdir -p ${NEWDIR}
    echo dcm2niix -o ${NEWDIR} -f ${NEWNAME} ${OLDDIR}
    ;;

  meg)
    # these should start with _ when non-empty
    TASK=_task-unknown
    ACQ=
    PROC=
    MODALITY=_meg

    # count the number of dataset directories
    NUM=`ls -d ${SOURCE}/${SUB}/${SES}/${TYP}/*.ds | wc -l`

    echo mkdir -p ${TARGET}/${SUB}/${SES}/meg

    i=1
    for OLDNAME in ${SOURCE}/${SUB}/${SES}/${TYP}/*.ds ; do 
      if [ $NUM -gt 1 ]; then 
        RUN=_run-$i
        i=$(expr $i + 1)
      else
        RUN=
      fi
      NEWNAME=${TARGET}/${SUB}/${SES}/${TYP}/${SUB}_${SES}${TASK}${ACQ}${PROC}${RUN}${MODALITY}.ds
      echo newDs -anon ${OLDNAME} ${NEWNAME}
    done
    ;;

  eeg) 
    # echo EEG data found in $SOURCE/${SUB}/${SES}/${TYP}
    ;;
    
  ieeg) 
    # echo iEEG data found in $SOURCE/${SUB}/${SES}/${TYP}
    ;;
    
  behav)
    # echo behavioural data found in $SOURCE/${SUB}/${SES}/${TYP}
    ;;
    
  *) 
    # echo unknown data found in $SOURCE/${SUB}/${SES}/${TYP}
    ;;
esac

done # TYP
done # SUB
done # SES
