#!/usr/bin/env python
#
# BIDS conversion utility for nifti files
#
# Copyright (C) 2017-2018, Robert Oostenveld
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import os
import sys
import re
import getopt
import numpy as np

if hasattr(sys, 'frozen'):
    basis = sys.executable
elif sys.argv[0] != '':
    basis = sys.argv[0]
else:
    basis = './'
installed_folder = os.path.split(basis)[0]

# bin contains this file, lib contains shared modules
sys.path.insert(0, os.path.join(installed_folder, '../lib'))


def help(name):
    print("")
    print("This script searches through a directory for all nifti files and prints")
    print("them to the output screen in such a way that you can easily make a script")
    print("to reorganize your files to BIDS.")
    print("")
    print("You should save the output to a script, edit the script and then execute it.")
    print("")
    print("Use as")
    print('  %s -c <command> -o <outputdir> -x <extension> -s <sessionprefix> [inputdir]' % name)
    print("")
    print("Optional arguments")
    print("   -c <command>               command to execute, eg. mv or cp")
    print("   -o <outputdir>             output directory")
    print("   --subjectprefix=<string>   subject prefix (default = \"\")")
    print("   --sessionprefix=<string>   session prefix (default = \"mri\")")
    print("   --datatype=<string>        data type, can be anat|func|dwi|fmap (default = \"anat\")")
    print("")


# set the defaults
command = "cp"
outputdir = "FIXME"
extension = "log"
subjectprefix = ""
sessionprefix = "mri"
datatype="anat"

try:
    opts, args = getopt.getopt(sys.argv[1:], "hc:o:x:", ["command=", "outputdir=", "extension=", "subjectprefix=", "sessionprefix="])
except getopt.GetoptError:
    help(sys.argv[0])
    sys.exit(2)
for opt, arg in opts:
    if opt == '-h':
        help(sys.argv[0])
        sys.exit()
    elif opt in ("-c", "--command"):
        command = arg
    elif opt in ("-o", "--outputdir"):
        outputdir = arg
    elif opt in ("--subjectprefix"):
        subjectprefix = arg
    elif opt in ("-s", "--sessionprefix"):
        sessionprefix = arg

inputdirs = args
if len(inputdirs) < 1:
    help(sys.argv[0])
    sys.exit(2)

rootlist = []
filelist = []
for dir in inputdirs:
    print('# scanning directory structure starting at %s' % dir)
    for root, dirs, files in os.walk(dir):
        for file in files:
            if re.match('^.*\.nii$', file) or re.match('^.*\.nii.gz$', file):
                rootlist.append(root)  # the directory containing the nifti file
                filelist.append(file)

print('# found %d nifti log files in %d directories' % (len(filelist), len(set(rootlist))))

identifierlist = []
for root, file in zip(rootlist, filelist):
    # add a tuple with the directory and the dataset name
    identifier = (root, file)
    identifierlist.append(identifier)

uniqueidentifier = sorted(list(set(identifierlist)))
print('# constructed %d different identifiers' % len(uniqueidentifier))

sub = 1
ses = 1
typ = 1
subdir = []
sesdir = []
typdir = []
subvar = []
sesvar = []
typvar = []
width = int(np.floor(np.log10(len(uniqueidentifier)))+1)
for identifier in uniqueidentifier:
    subdir.append('sub-{pre}{num:{fill}{width}}'.format(pre=subjectprefix, num=sub, fill='0', width=3))
    subvar.append('SUB{num:{fill}{width}}'.format(num=sub, fill='0', width=width))
    sesdir.append('ses-{pre}{num:{fill}{width}}'.format(pre=sessionprefix, num=ses, fill='0', width=2))
    sesvar.append('SES{num:{fill}{width}}'.format(num=sub, fill='0', width=width))
    typdir.append(datatype)
    typvar.append('TYP{num:{fill}{width}}'.format(num=sub, fill='0', width=width))
    sub += 1

print("")
print("# please verify the following general variables")
print("COMMAND=%s" % command)
print("OUTPUTDIR=%s" % outputdir)

# give some examples, note that quotation marks are needed in case there are spaces in the command
print("")
print("#COMMAND=\"cp\"")
print("#COMMAND=\"mv\"")
print("#COMMAND=\"rsync -arpv\"")
print("#COMMAND=\"ln\"")

print("")
print("# please verify the following subject and session identifier variables and the MR type")

width1 = 0
width2 = 0
width3 = 0
for subv, subd, sesv, sesd, typv, typd, identifier in zip(subvar, subdir, sesvar, sesdir, typvar, typdir, uniqueidentifier):
    col1 = "%s=%s" % (subv, subd)
    col2 = "%s=%s" % (sesv, sesd)
    col3 = "%s=%s" % (typv, typd)
    width1 = max(width1, len(col1))
    width2 = max(width2, len(col2))
    width3 = max(width3, len(col3))
for subv, subd, sesv, sesd, typv, typd, identifier in zip(subvar, subdir, sesvar, sesdir, typvar, typdir, uniqueidentifier):
    col1 = "%s=%s" % (subv, subd)
    col2 = "%s=%s" % (sesv, sesd)
    col3 = "%s=%s" % (typv, typd)
    col4 = "%s" % (identifier, )
    print(col1.ljust(width1) + " ; " + col2.ljust(width2) + " ; " + col3.ljust(width3) + " # " + col4)

print("")
print("###### the script should not need any changes below this line ######")

print("")
print("# create the target directory structure")
for subv, sesv, typv in zip(subvar, sesvar, typvar):
    print("mkdir -p %s" % os.path.join("$OUTPUTDIR", "$" + subv, "$" + sesv, "$" + typv))

print("")
print("# copy all the files")

oldname = []
newname = []
for root, file, identifier in zip(rootlist, filelist, identifierlist):
    index_id = uniqueidentifier.index(identifier)
    oldname.append(os.path.join(root, file))
    newname.append(os.path.join("$OUTPUTDIR", '$' + subvar[index_id], '$' + sesvar[index_id], '$' + typvar[index_id], file))

if len(oldname):
    width = max((len(x), x) for x in oldname)[0]
else:
    width = 0

for old, new in zip(oldname, newname):
    pad = (width - len(old)) * " "
    print("$COMMAND \"%s\"%s \"%s\"" % (old, pad, new))
