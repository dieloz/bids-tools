#!/usr/bin/env python
#
# BIDS helper utility to create the sidecar files
#
# Copyright (C) 2017, Robert Oostenveld
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import os
import sys
import re
import getopt

if hasattr(sys, 'frozen'):
    basis = sys.executable
elif sys.argv[0]!='':
    basis = sys.argv[0]
else:
    basis = './'
installed_folder = os.path.split(basis)[0]

# bin contains this file, lib contains shared modules
sys.path.insert(0,os.path.join(installed_folder,'../lib'))

def help(name):
    print ""
    print "This script parses all subjects and sessions in a BIDS dataset"
    print "and creates the required/optional sidecar files."
    print ""
    print "Use as"
    print '  %s [options] [inputdir]' % name
    print ""
    print "Supported options include the following"
    print "  -t,--test          do not create the files, just print which files would be created"
    print "  -f,--force         overwrite existing files, the default is not to overwrite"
    print ""

# set the defaults
test = False
force = False

try:
    opts, args = getopt.getopt(sys.argv[1:],"htf",["test","force"])
except getopt.GetoptError:
    help(sys.argv[0])
    sys.exit(2)
for opt, arg in opts:
    if opt == '-h':
        help(sys.argv[0])
        sys.exit()
    elif opt in ("-t", "--test"):
        test = True
    elif opt in ("-f", "--force"):
        force = True

inputdirs = args
if len(inputdirs)!=1:
    help(sys.argv[0])
    sys.exit(2)

root = inputdirs[0]

datatype = ['anat', 'dwi', 'func', 'fmap', 'beh', 'meg', 'eeg', 'ieeg']

hasSub = False
hasSes = False
hasTyp = False

# def writeTSV(filename, table):
# def writeJSON(filename, table):

####################################################################################

def createSidecarANAT(root, sub, ses):
    print "createSidecarANAT", root, sub, ses
    sidecar = {
    }

def createSidecarDWI(root, sub, ses):
    print "createSidecarDWI", root, sub, ses

def createSidecarFUNC(root, sub, ses):
    print "createSidecarFUNC", root, sub, ses

def createSidecarFMAP(root, sub, ses):
    print "createSidecarFMAP", root, sub, ses

def createSidecarBEH(root, sub, ses):
    print "createSidecarBEH", root, sub, ses

def createSidecarMEG(root, sub, ses):
    print "createSidecarMEG", root, sub, ses

def createSidecarEEG(root, sub, ses):
    print "createSidecarEEG", root, sub, ses

def createSidecarIEEG(root, sub, ses):
    print "createSidecarIEEG", root, sub, ses

####################################################################################

def createSidecarSessions(root, sub):
    print "createSidecarSessions", root, sub

####################################################################################

def createSidecarParticipants(root):
    print "createSidecarParticipants", root
    participant_id = [];
    sex = [];
    age = [];
    for sub in os.listdir(root):
        if re.match('^sub-[a-zA-Z0-9]*$', sub):
            participant_id.append(sub)
            sex.append('unknown')
            age.append('unknown')
    header = ['participant_id', 'sex', 'age']
    table = {'participant_id': participant_id, 'sex': sex, 'age': age}
    # print header, table


# loop over all subjects, sessions and data types
for sub in os.listdir(root):
    if re.match('^sub-[a-zA-Z0-9]*$', sub):
        hasSub = True
        for ses in os.listdir(os.path.join(root, sub)):
            # sub-001/ses-mri01
            if re.match('^ses-[a-zA-Z0-9]*$', ses):
                hasSes = True
                for typ in os.listdir(os.path.join(root, sub)):
                    # sub-001/ses-mri01/anat
                    if ( typ in datatype ):
                        hasTyp = True
                        if typ=='anat':
                            createSidecarANAT(root, sub, ses)
                        elif typ=='dwi':
                            createSidecarDWI(root, sub, ses)
                        elif typ=='func':
                            createSidecarFUNC(root, sub, ses)
                        elif typ=='fmap':
                            createSidecarFMAP(root, sub, ses)
                        elif typ=='meg':
                            createSidecarMEG(root, sub, ses)
                        elif typ=='eeg':
                            createSidecarEEG(root, sub, ses)
                        elif typ=='ieeg':
                            createSidecarIEEG(root, sub, ses)

        for typ in os.listdir(os.path.join(root, sub)):
            # sub-001/anat
            ses = None
            if ( typ in datatype ):
                hasTyp = True
                if typ=='anat':
                    createSidecarANAT(root, sub, ses)
                elif typ=='dwi':
                    createSidecarDWI(root, sub, ses)
                elif typ=='func':
                    createSidecarFUNC(root, sub, ses)
                elif typ=='fmap':
                    createSidecarFMAP(root, sub, ses)
                elif typ=='meg':
                    createSidecarMEG(root, sub, ses)
                elif typ=='eeg':
                    createSidecarEEG(root, sub, ses)
                elif typ=='ieeg':
                    createSidecarIEEG(root, sub, ses)
    if hasSes:
        createSidecarSessions(root, sub)

if hasSub:
    createSidecarParticipants(root)

# write the dataset_description.json file
# write the CHANGES file
# write the README file
# write the TASK file(s)
