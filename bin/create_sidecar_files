#!/usr/bin/env python
#
# BIDS helper utility to create the sidecar files
#
# Specification for MRI  https://docs.google.com/document/d/1HFUkAEE-pB-angVcYe6pf_-fVf4sCpOHKesUvfb8Grc/edit#
# Specification for MEG  https://docs.google.com/document/d/1FWex_kSPWVh_f4rKgd5rxJmxlboAPtQlmBc1gyZlRZM/edit#
# Specification for EEG  https://docs.google.com/document/d/1ArMZ9Y_quTKXC-jNXZksnedK2VHHoKP3HCeO5HPcgLE/edit#
# Specification for iEEG https://docs.google.com/document/d/1qMUkoaXzRMlJuOcfTYNr3fTsrl4SewWjffjMD5Ew6GY/edit#
#
# Copyright (C) 2017, Robert Oostenveld
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import os
import sys
import re
import getopt
import csv
import json
from collections import OrderedDict

if hasattr(sys, 'frozen'):
    basis = sys.executable
elif sys.argv[0]!='':
    basis = sys.argv[0]
else:
    basis = './'
installed_folder = os.path.split(basis)[0]

# bin contains this file, lib contains shared modules
sys.path.insert(0,os.path.join(installed_folder,'../lib'))

def help(name):
    print ""
    print "This script parses all subjects and sessions in a BIDS dataset"
    print "and creates the required/optional sidecar files."
    print ""
    print "Use as"
    print '  %s [options] [inputdir]' % name
    print ""
    print "Supported options include the following"
    print "  -t,--test          do not create the files, just print which files would be created"
    print "  -f,--force         overwrite existing files, the default is not to overwrite"
    print ""

# set the defaults
test = False
force = False

try:
    opts, args = getopt.getopt(sys.argv[1:],"htf",["test","force"])
except getopt.GetoptError:
    help(sys.argv[0])
    sys.exit(2)
for opt, arg in opts:
    if opt == '-h':
        help(sys.argv[0])
        sys.exit()
    elif opt in ("-t", "--test"):
        test = True
    elif opt in ("-f", "--force"):
        force = True

inputdirs = args
if len(inputdirs)!=1:
    help(sys.argv[0])
    sys.exit(2)

root = inputdirs[0]

datatype = ['anat', 'dwi', 'func', 'fmap', 'beh', 'meg', 'eeg', 'ieeg']

hasSub = False
hasSes = False
hasTyp = False

####################################################################################

def writeASCII(filename, data):
    if test:
        prefix = 'TEST: '
    else:
        prefix = ''
    if not force and os.path.exists(filename):
        print prefix + "skipping", filename
    else:
        print prefix + "writing", filename
        if not test:
            with open(filename, 'w') as asciifile:
                asciifile.write(data)

def writeJSON(filename, data):
    if test:
        prefix = 'TEST: '
    else:
        prefix = ''
    if not force and os.path.exists(filename):
        print prefix + "skipping", filename
    else:
        print prefix + "writing", filename
        if not test:
            with open(filename, 'w') as jsonfile:
                json.dump(data, jsonfile, indent=2)

def writeTSV(filename, data):
    if test:
        prefix = 'TEST: '
    else:
        prefix = ''
    if not force and os.path.exists(filename):
        print prefix + "skipping", filename
    else:
        print prefix + "writing", filename
        if not test:
            with open(filename, 'w') as tsvfile:
                writer = csv.writer(tsvfile, delimiter='\t')
                writer.writerow(data.keys())
                try:
                    for row in zip(*map((lambda x: data[x]), data.keys())):
                        writer.writerow(row)
                except:
                    # this happens if the columns are empty or of unequal length
                    pass

####################################################################################

def createSidecarANAT(root, sub, ses):
    print "createSidecarANAT", root, sub, ses
    sidecar = {
        'InstitutionName': 'n/a',
        'InstitutionAddress': 'n/a',
        'Manufacturer': 'n/a',
        'ManufacturersModelName': 'n/a',
        'DeviceSerialNumber': 'n/a',
    }

def createSidecarDWI(root, sub, ses):
    print "createSidecarDWI", root, sub, ses
    sidecar = {
        'InstitutionName': 'n/a',
        'InstitutionAddress': 'n/a',
        'Manufacturer': 'n/a',
        'ManufacturersModelName': 'n/a',
        'DeviceSerialNumber': 'n/a',
    }

def createSidecarFUNC(root, sub, ses):
    print "createSidecarFUNC", root, sub, ses
    sidecar = {
        'InstitutionName': 'n/a',
        'InstitutionAddress': 'n/a',
        'Manufacturer': 'n/a',
        'ManufacturersModelName': 'n/a',
        'TaskName': 'n/a',
        'TaskDescription': 'n/a',
        'Instructions': 'n/a',
        'CogAtlasID': 'n/a',
        'CogPOID': 'n/a',
        'DeviceSerialNumber': 'n/a',
    }

def createSidecarFMAP(root, sub, ses):
    print "createSidecarFMAP", root, sub, ses
    sidecar = {
        'InstitutionName': 'n/a',
        'InstitutionAddress': 'n/a',
        'Manufacturer': 'n/a',
        'ManufacturersModelName': 'n/a',
        'DeviceSerialNumber': 'n/a',
    }

def createSidecarBEH(root, sub, ses):
    print "createSidecarBEH", root, sub, ses
    sidecar = {
        'InstitutionName': 'n/a',
        'InstitutionAddress': 'n/a',
        'Manufacturer': 'n/a',
        'ManufacturersModelName': 'n/a',
        'DeviceSerialNumber': 'n/a',
    }

def createSidecarMEG(root, sub, ses):
    typ = 'meg'
    if ses==None:
        dirname = os.path.join(root, sub, typ)
        basename = sub
    else:
        dirname = os.path.join(root, sub, ses, typ)
        basename = sub + '_' + ses

    # SESSION specific files
    # _fid.json
    # _photo.jpg
    # _fidinfo.txt
    # _headshape.<manufacturer_specific_format>
    # scans.tsv
    filename = os.path.join(dirname, basename + '_fidinfo.txt')
    writeASCII(filename, '')
    filename = os.path.join(dirname, basename + '_fid.json')
    fid = {
        'MEGCoordinateSystem': 'n/a',
        'MEGCoordinateSystemDescription': 'n/a',
        'EEGCoordinateSystem': 'n/a',
        'EEGCoordinateUnits': 'n/a',
        'EEGCoordinateSystemDescription': 'n/a',
        'IntendedFor': 'n/a',
        'AnatomicalMRICoordinateSystem': 'n/a',
        'AnatomicalMRICoordinateSystemDescription': 'n/a',
        'CoilCoordinates': 'n/a',
        'CoilCoordinateSystem': 'n/a',
        'CoilCoordinateUnits': 'n/a',
        'CoilCoordinateSystemDescription': 'n/a',
        'LandmarkCoordinates': 'n/a',
        'LandmarkCoordinateSystem': 'n/a',
        'LandmarkCoordinateUnits': 'n/a',
        'LandmarkCoordinateSystemDescription': 'n/a',
        'DigitizedHeadPoints': 'n/a',
        'DigitizedHeadPointsCoordinateSystem': 'n/a',
        'DigitizedHeadPointsCoordinateUnits': 'n/a',
        'DigitizedHeadPointsCoordinateSystemDescription': 'n/a',
    }
    writeJSON(filename, fid)
    scans = OrderedDict(filename=None, acq_time=None)
    filename = os.path.join(dirname, 'scans.tsv')
    writeTSV(filename, scans)

    # RUN specific files
    # _meg.json:  A JSON document containing metadata about the MEG recording data file.
    # _channels.tsv: A channels .tsv file listing channel names, types, and other optional information.
    # _events.tsv: A .tsv file listing the event latency and description.
    meg = {
        'InstitutionName': 'n/a',
        'InstitutionAddress': 'n/a',
        'Manufacturer': 'n/a',
        'ManufacturersModelName': 'n/a',
        'TaskName': 'n/a',
        'TaskDescription': 'n/a',
        'Instructions': 'n/a',
        'CogAtlasID': 'n/a',
        'CogPOID': 'n/a',
        'DeviceSerialNumber': 'n/a',
        'SamplingFrequency': 'n/a',
        'PowerLineFrequency': 'n/a',
        'MEGChannelCount': 'n/a',
        'MEGREFChannelCount': 'n/a',
        'EEGChannelCount': 'n/a',
        'EOGChannelCount': 'n/a',
        'ECGChannelCount': 'n/a',
        'EMGChannelCount': 'n/a',
        'MiscChannelCount': 'n/a',
        'TriggerChannelCount': 'n/a',
        'EEGPlacementScheme': 'n/a',
        'EEGReference': 'n/a',
        'DewarPosition': 'n/a',
        'SoftwareFilters': 'n/a',
        'RecordingDuration': 'n/a',
        'RecordingType': 'n/a',
        'EpochLength': 'n/a',
        'DeviceSoftwareVersions': 'n/a',
        'ContinuousHeadLocalization': 'n/a',
        'CoilFrequency': 'n/a',
        'MaxMovement': 'n/a',
        'SubjectArtefactDescription': 'n/a',
        'DigitizedLandmarks': 'n/a',
        'DigitizedHeadPoints': 'n/a'
    }
    channels = OrderedDict(name=None, type=None, description=None, sampling_frequency=None, low_cutoff=None, high_cutoff=None, notch=None, software_filters=None, status=None)
    events = OrderedDict(onset=None, duration=None, trial_type=None, response_time=None, stim_file=None, HED=None)
    for run in listMEGruns(os.path.join(dirname)):
        (run, ext) = os.path.splitext(run)
        filename = os.path.join(dirname, basename + '_' + run + '_meg.json')
        writeJSON(filename, meg)
        filename = os.path.join(dirname, basename + '_' + run + '_channels.tsv')
        writeTSV(filename, channels)
        filename = os.path.join(dirname, basename + '_' + run + '_events.tsv')
        writeTSV(filename, events)

def createSidecarEEG(root, sub, ses):
    print "createSidecarEEG", root, sub, ses
    eeg = {
        'InstitutionName': 'n/a',
        'InstitutionAddress': 'n/a',
        'Manufacturer': 'n/a',
        'ManufacturersModelName': 'n/a',
        'DeviceSerialNumber': 'n/a',
    }

def createSidecarIEEG(root, sub, ses):
    print "createSidecarIEEG", root, sub, ses
    # SESSION specific files
    # _channels.tsv
    # _acq-<label>_electrodes.tsv
    # _acq-<label>_electrodes.json
    # _photo.jpg
    # _electrodesinfo.txt
    # scans.tsv

    # RUN specific files
    # _ieeg.json
    # _events.tsv

    ieeg = {
        'InstitutionName': 'n/a',
        'InstitutionAddress': 'n/a',
        'Manufacturer': 'n/a',
        'ManufacturersModelName': 'n/a',
        'DeviceSerialNumber': 'n/a',
    }

def createSidecarSessions(root, sub):
    filename = os.path.join(root, sub, 'sessions.tsv')
    session = [];
    for ses in os.listdir(os.path.join(root, sub)):
        if re.match('^ses-[a-zA-Z0-9]*$', ses):
            session.append(ses)
    data = {'session': session}
    writeTSV(filename, data)

def createSidecarREADME(root):
    filename = os.path.join(root, 'README')
    writeASCII(filename, (
    'Describe the dataset here\n'
    ))

def createSidecarCHANGES(root):
    filename = os.path.join(root, 'CHANGES')
    writeASCII(filename, (
    'YYY-MM-DD\n'
    '  - describe the changes here ...\n'
    ))


def createSidecarTask(root, task):
    filename = os.path.join(root, 'task-' + task + '.json')
    sidecar = {
        "TaskName": 'n/a'
    }

def createSidecarDatasetDescription(root):
    filename = os.path.join(root, 'dataset_description.json')
    sidecar = {
        "BIDSVersion": "1.0.0",
        "License": "n/a",
        "Name": "n/a",
        "ReferencesAndLinks": "n/a"
    }
    writeJSON(filename, sidecar)

def createSidecarParticipants(root):
    filename = os.path.join(root, 'participants.tsv')
    participant_id = [];
    sex = [];
    age = [];
    for sub in os.listdir(root):
        if re.match('^sub-[a-zA-Z0-9]*$', sub):
            participant_id.append(sub)
            sex.append('unknown')
            age.append('unknown')
    data = OrderedDict(participant_id=participant_id, sex=sex, age=age)
    writeTSV(filename, data)

################################################################################################
def listMEGruns(root):
    runs = []
    for file in os.listdir(root):
        if re.match('^.*\.ds$', file):
            runs.append(file)
        if re.match('^.*\.fif$', file):
            runs.append(file)
    return runs

################################################################################################
# the following section deals with parsing the directory and file structure
################################################################################################

subList = []
taskList = []

# loop over all subjects, sessions and data types
for sub in os.listdir(root):
    if not os.path.isdir(os.path.join(root, sub)):
        continue
    # sub-001
    if re.match('^sub-[a-zA-Z0-9]*$', sub):
        hasSub = True
        subList.append(sub)
        for ses in os.listdir(os.path.join(root, sub)):
            if not os.path.isdir(os.path.join(root, sub, ses)):
                continue
            # sub-001/ses-mri01
            if re.match('^ses-[a-zA-Z0-9]*$', ses):
                hasSes = True
                for typ in os.listdir(os.path.join(root, sub)):
                    if not os.path.isdir(os.path.join(root, sub, ses, typ)):
                        continue
                    # sub-001/ses-mri01/anat
                    if ( typ in datatype ):
                        hasTyp = True
                        if typ=='anat':
                            createSidecarANAT(root, sub, ses)
                        elif typ=='dwi':
                            createSidecarDWI(root, sub, ses)
                        elif typ=='func':
                            createSidecarFUNC(root, sub, ses)
                        elif typ=='fmap':
                            createSidecarFMAP(root, sub, ses)
                        elif typ=='meg':
                            createSidecarMEG(root, sub, ses)
                        elif typ=='eeg':
                            createSidecarEEG(root, sub, ses)
                        elif typ=='ieeg':
                            createSidecarIEEG(root, sub, ses)
                if not hasTyp:
                    raise NameError('ERROR: type is missing')
                    # if len(listMEGruns(os.path.join(root, sub, ses)))>0:
                    #    createSidecarMEG(root, sub, ses)

        for typ in os.listdir(os.path.join(root, sub)):
            if not os.path.isdir(os.path.join(root, sub, typ)):
                continue
            ses = None
            # sub-001/anat
            if ( typ in datatype ):
                hasTyp = True
                if typ=='anat':
                    createSidecarANAT(root, sub, ses)
                elif typ=='dwi':
                    createSidecarDWI(root, sub, ses)
                elif typ=='func':
                    createSidecarFUNC(root, sub, ses)
                elif typ=='fmap':
                    createSidecarFMAP(root, sub, ses)
                elif typ=='meg':
                    createSidecarMEG(root, sub, ses)
                elif typ=='eeg':
                    createSidecarEEG(root, sub, ses)
                elif typ=='ieeg':
                    createSidecarIEEG(root, sub, ses)
        if not hasTyp:
            raise NameError('ERROR: type is missing')
            # if len(listMEGruns(os.path.join(root, sub)))>0:
            #    createSidecarMEG(root, sub)

    if hasSes:
        createSidecarSessions(root, sub)

if hasSub:
    createSidecarREADME(root)
    createSidecarCHANGES(root)
    createSidecarParticipants(root)
    createSidecarDatasetDescription(root)
    for task in taskList:
        createSidecarTask(root, task)
else:
    print 'ERROR: this directory is not organized according to BIDS'
