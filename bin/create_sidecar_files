#!/usr/bin/env python
#
# BIDS helper utility to create the sidecar files
#
# Specification for MRI  https://docs.google.com/document/d/1HFUkAEE-pB-angVcYe6pf_-fVf4sCpOHKesUvfb8Grc/edit#
# Specification for MEG  https://docs.google.com/document/d/1FWex_kSPWVh_f4rKgd5rxJmxlboAPtQlmBc1gyZlRZM/edit#
# Specification for EEG  https://docs.google.com/document/d/1ArMZ9Y_quTKXC-jNXZksnedK2VHHoKP3HCeO5HPcgLE/edit#
# Specification for iEEG https://docs.google.com/document/d/1qMUkoaXzRMlJuOcfTYNr3fTsrl4SewWjffjMD5Ew6GY/edit#
#
# Copyright (C) 2017, Robert Oostenveld
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import os
import sys
import re
import getopt
import csv
import json
from collections import OrderedDict

if hasattr(sys, 'frozen'):
    basis = sys.executable
elif sys.argv[0]!='':
    basis = sys.argv[0]
else:
    basis = './'
installed_folder = os.path.split(basis)[0]

# bin contains this file, lib contains shared modules
sys.path.insert(0,os.path.join(installed_folder,'../lib'))
from pybids import sidecar
from pybids import channels

def help(name):
    print ''
    print 'This script parses all subjects and sessions in a BIDS dataset'
    print 'and creates the required/optional sidecar files.'
    print ''
    print 'Use as'
    print '  %s [options] <datadir>' % name
    print ''
    print 'Supported options include the following'
    print '  -t,--test          do not create the files, just print which files would be created'
    print '  -f,--force         overwrite existing files, the default is not to overwrite'
    print ''
    print 'The default is to create all sidecar files that apply to the dataset. If'
    print 'you specify any of the following options, only these specific sidecar'
    print 'files will be created and all others will be skipped.'
    print ''
    print '  --participants     create the participants.tsv file'
    print '  --sessions         create the sessions.tsv files (per subject)'
    print '  --anat             create the sidecar files for the specific datatype (per subject and session)'
    print '  --meg              create the sidecar files for the specific datatype (per subject and session)'
    print '  --eeg              create the sidecar files for the specific datatype (per subject and session)'
    print '  --ieeg             create the sidecar files for the specific datatype (per subject and session)'
    print '  --beh              create the sidecar files for the specific datatype (per subject and session)'
    print ''

# set the defaults
test = False
force = False
create_all = True
create_participants = False
create_sessions = False
create_anat = False
create_beh = False
create_eeg = False
create_ieeg = False
create_meg = False

try:
    opts, args = getopt.getopt(sys.argv[1:],'htf',['test','force','participants','sessions','anat','beh','eeg','ieeg','meg'])
except getopt.GetoptError:
    help(sys.argv[0])
    sys.exit(2)
for opt, arg in opts:
    if opt == '-h':
        help(sys.argv[0])
        sys.exit()
    elif opt in ('-t', '--test'):
        test = True
    elif opt in ('-f', '--force'):
        force = True
    elif opt in ('--participants'):
        create_participants = True
        create_all = False
    elif opt in ('--sessions'):
        create_sessions = True
        create_all = False
    elif opt in ('--anat'):
        create_anat = True
        create_all = False
    elif opt in ('--beh'):
        create_beh = True
        create_all = False
    elif opt in ('--eeg'):
        create_eeg = True
        create_all = False
    elif opt in ('--ieeg'):
        create_ieeg = True
        create_all = False
    elif opt in ('--meg'):
        create_meg = True
        create_all = False


inputdirs = args
if len(inputdirs)!=1:
    help(sys.argv[0])
    sys.exit(2)

root = inputdirs[0]

datatype = ['anat', 'dwi', 'func', 'fmap', 'beh', 'meg', 'eeg', 'ieeg']

hasSub = False
hasSes = False
hasTyp = False

####################################################################################

def writeASCII(filename, data):
    if test:
        prefix = 'TEST: '
    else:
        prefix = ''
    if not force and os.path.exists(filename):
        print prefix + 'skipping', filename
    else:
        print prefix + 'writing', filename
        if not test:
            with open(filename, 'w') as asciifile:
                asciifile.write(data)

def writeJSON(filename, data):
    if test:
        prefix = 'TEST: '
    else:
        prefix = ''
    if not force and os.path.exists(filename):
        print prefix + 'skipping', filename
    else:
        print prefix + 'writing', filename
        if not test:
            with open(filename, 'w') as jsonfile:
                json.dump(data, jsonfile, indent=2)

def writeTSV(filename, data):
    if test:
        prefix = 'TEST: '
    else:
        prefix = ''
    if not force and os.path.exists(filename):
        print prefix + 'skipping', filename
    else:
        print prefix + 'writing', filename
        if not test:
            with open(filename, 'w') as tsvfile:
                writer = csv.writer(tsvfile, delimiter='\t')
                writer.writerow(data.keys())
                try:
                    for row in zip(*map((lambda x: data[x]), data.keys())):
                        writer.writerow(row)
                except:
                    # this happens if the columns are empty or of unequal length
                    pass

####################################################################################

def createSidecarANAT(root, sub, ses):
  if create_all or create_anat:
    typ = 'anat'
    if ses==None:
        dirname = os.path.join(root, sub, typ)
        basename = sub
    else:
        dirname = os.path.join(root, sub, ses, typ)
        basename = sub + '_' + ses

    for run in listScans(os.path.join(dirname), 'anat'):
        (run, ext) = os.path.splitext(run)
        filename = os.path.join(dirname, run + '.json')
        writeJSON(filename, sidecar.anat.anat)

def createSidecarDWI(root, sub, ses):
  if create_all:
    print 'createSidecarDWI', root, sub, ses

def createSidecarFUNC(root, sub, ses):
  if create_all:
    print 'createSidecarFUNC', root, sub, ses

def createSidecarFMAP(root, sub, ses):
  if create_all:
    print 'createSidecarFMAP', root, sub, ses

def createSidecarBEH(root, sub, ses):
  if create_all or create_beh:
    print 'createSidecarBEH', root, sub, ses

def createSidecarMEG(root, sub, ses):
  if create_all or create_meg:
    typ = 'meg'
    if ses==None:
        dirname = os.path.join(root, sub, typ)
        basename = sub
    else:
        dirname = os.path.join(root, sub, ses, typ)
        basename = sub + '_' + ses

    filename = os.path.join(dirname, basename + '_coordsystem.json')
    writeJSON(filename, sidecar.meg.coordsystem)
    filename = os.path.join(dirname, basename + '_scans.tsv')
    writeTSV(filename, sidecar.meg.scans)

    for run in listScans(os.path.join(dirname), 'meg'):
        (run, ext) = os.path.splitext(run)
        filename = os.path.join(dirname, run + '_meg.json')
        writeJSON(filename, sidecar.meg.meg)
        filename = os.path.join(dirname, run + '_channels.tsv')
        writeTSV(filename, sidecar.meg.channels)
        filename = os.path.join(dirname, run + '_events.tsv')
        writeTSV(filename, sidecar.meg.events)

def createSidecarEEG(root, sub, ses):
  if create_all or create_eeg:
    print 'createSidecarEEG', root, sub, ses

def createSidecarIEEG(root, sub, ses):
  if create_all or create_ieeg:
    print 'createSidecarIEEG', root, sub, ses

def createSidecarSessions(root, sub):
  if create_all or create_sessions:
    filename = os.path.join(root, sub, 'sessions.tsv')
    session = [];
    for ses in os.listdir(os.path.join(root, sub)):
        if re.match('^ses-[a-zA-Z0-9]*$', ses):
            session.append(ses)
    data = {'session_id': session}
    writeTSV(filename, data)

def createSidecarREADME(root):
  if create_all:
    filename = os.path.join(root, 'README')
    writeASCII(filename, sidecar.readme)

def createSidecarCHANGES(root):
  if create_all:
    filename = os.path.join(root, 'CHANGES')
    writeASCII(filename, sidecar.changes)

def createSidecarTask(root, task):
  if create_all:
    filename = os.path.join(root, 'task-' + task + '.json')
    writeJSON(filename, sidecar.task)

def createSidecarDatasetDescription(root):
  if create_all:
    filename = os.path.join(root, 'dataset_description.json')
    writeJSON(filename, sidecar.dataset_description)

def createSidecarParticipants(root):
  if create_all or create_participants:
    filename = os.path.join(root, 'participants.tsv')
    participants = sidecar.participants
    for sub in os.listdir(root):
        if re.match('^sub-[a-zA-Z0-9]*$', sub):
            participants['participant_id'].append(sub)
            participants['sex'].append('n/a')
            participants['age'].append('n/a')
    writeTSV(filename, participants)

################################################################################################
def listScans(root, typ):
    runs = []
    for file in os.listdir(root):
        if typ=='meg' and re.match('^.*\.ds$', file):
            runs.append(file)
        if typ=='meg' and re.match('^.*\.fif$', file):
            runs.append(file)
        if typ=='anat' and (re.match('^.*\.nii$', file) or re.match('^.*\.nii.gz$', file)):
            runs.append(file)
        if typ=='func' and (re.match('^.*\.nii$', file) or re.match('^.*\.nii.gz$', file)):
            runs.append(file)
    return runs

################################################################################################
# the following section deals with parsing the directory and file structure
################################################################################################

subList = []
taskList = []

# loop over all subjects, sessions and data types
for sub in os.listdir(root):
    if not os.path.isdir(os.path.join(root, sub)):
        continue
    # sub-001
    if re.match('^sub-[a-zA-Z0-9]*$', sub):
        hasSub = True
        subList.append(sub)
        for ses in os.listdir(os.path.join(root, sub)):
            if not os.path.isdir(os.path.join(root, sub, ses)):
                continue
            # sub-001/ses-mri01
            if re.match('^ses-[a-zA-Z0-9]*$', ses):
                hasSes = True
                for typ in os.listdir(os.path.join(root, sub, ses)):
                    if not os.path.isdir(os.path.join(root, sub, ses, typ)):
                        continue
                    # sub-001/ses-mri01/anat
                    if ( typ in datatype ):
                        hasTyp = True
                        if typ=='anat':
                            createSidecarANAT(root, sub, ses)
                        elif typ=='dwi':
                            createSidecarDWI(root, sub, ses)
                        elif typ=='func':
                            createSidecarFUNC(root, sub, ses)
                        elif typ=='fmap':
                            createSidecarFMAP(root, sub, ses)
                        elif typ=='meg':
                            createSidecarMEG(root, sub, ses)
                        elif typ=='eeg':
                            createSidecarEEG(root, sub, ses)
                        elif typ=='ieeg':
                            createSidecarIEEG(root, sub, ses)
                if not hasTyp:
                    raise NameError('ERROR: type is missing')
                    # if len(listScans(os.path.join(root, sub, ses)), 'meg')>0:
                    #    createSidecarMEG(root, sub, ses)

        for typ in os.listdir(os.path.join(root, sub)):
            if not os.path.isdir(os.path.join(root, sub, typ)):
                continue
            ses = None
            # sub-001/anat
            if ( typ in datatype ):
                hasTyp = True
                if typ=='anat':
                    createSidecarANAT(root, sub, ses)
                elif typ=='dwi':
                    createSidecarDWI(root, sub, ses)
                elif typ=='func':
                    createSidecarFUNC(root, sub, ses)
                elif typ=='fmap':
                    createSidecarFMAP(root, sub, ses)
                elif typ=='meg':
                    createSidecarMEG(root, sub, ses)
                elif typ=='eeg':
                    createSidecarEEG(root, sub, ses)
                elif typ=='ieeg':
                    createSidecarIEEG(root, sub, ses)
        if not hasTyp:
            raise NameError('ERROR: type is missing')
            # if len(listScans(os.path.join(root, sub)), 'meg')>0:
            #    createSidecarMEG(root, sub)

    if hasSes:
        createSidecarSessions(root, sub)

if hasSub:
    createSidecarREADME(root)
    createSidecarCHANGES(root)
    createSidecarParticipants(root)
    createSidecarDatasetDescription(root)
    for task in taskList:
        createSidecarTask(root, task)
else:
    print 'ERROR: this directory is not organized according to BIDS'
